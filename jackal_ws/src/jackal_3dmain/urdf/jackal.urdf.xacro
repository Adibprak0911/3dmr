<?xml version="1.0"?>
<!-- adapted from https://github.com/mechwiz/jackal_exploration/blob/master/urdf/jackal.urdf.xacro -->
<robot name="jackal" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:property name="PI" value="3.1415926535897931" />

  <xacro:arg name="robot_name" default=""/>
  <xacro:property name="robot_name" value="$(arg robot_name)" />

  <xacro:arg name="robot_topic_prefix" default=""/>
  <xacro:property name="robot_topic_prefix" value="$(arg robot_topic_prefix)" />

  <xacro:arg name="robot_frame_prefix" default=""/>
  <xacro:property name="robot_frame_prefix" value="$(arg robot_frame_prefix)" />

  <xacro:property name="wheelbase" value="0.262" />
  <xacro:property name="track" value="0.37559" />
  <xacro:property name="wheel_vertical_offset" value="0.0345" />
  <xacro:property name="footprint_vertical_offset" value="-0.0655" />

  <xacro:property name="wheel_radius" value="0.098" />
  <xacro:property name="wheel_width" value="0.040" />

  <xacro:property name="chassis_length" value="0.420" />
  <xacro:property name="chassis_width" value="0.310" />
  <xacro:property name="chassis_height" value="0.184" />

  <xacro:property name="dummy_inertia" value="1e-09"/>

  <xacro:property name="mount_spacing" value="0.120" />

  <xacro:arg name="gpu" default="true"/>
  <xacro:property name="gpu" value="$(arg gpu)" />

  <xacro:arg name="organize_cloud" default="false"/>
  <xacro:property name="organize_cloud" value="$(arg organize_cloud)" />

  <xacro:arg name="imuRate" default="100"/> <!-- Hz -->
  <xacro:property name="imuRate" value="$(arg imuRate)" />

  <xacro:property name="camera_link_size" value="0.05" /> <!-- 'camera' box size -->


  <material name="dark_grey"><color rgba="0.2 0.2 0.2 1.0" /></material>
  <material name="light_grey"><color rgba="0.4 0.4 0.4 1.0" /></material>
  <material name="yellow"><color rgba="0.8 0.8 0.0 1.0" /></material>
  <material name="black"><color rgba="0.15 0.15 0.15 1.0" /></material>

  <xacro:macro name="wheel" params="prefix *joint_pose">

    <link name="${prefix}_wheel_link">
      <visual>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <mesh filename="package://jackal_description/meshes/jackal-wheel.stl"/>
        </geometry>
        <material name="black" />
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.477"/>
        <inertia
          ixx="0.0013" ixy="0" ixz="0"
          iyy="0.0024" iyz="0"
          izz="0.0013"/>
      </inertial>
    </link>

    <gazebo reference="${prefix}_wheel_link">
      <material>Gazebo/DarkGrey</material>
    </gazebo>

    <joint name="${prefix}_wheel" type="continuous">
      <parent link="${robot_frame_prefix}chassis_link"/>
      <child link="${prefix}_wheel_link" />
      <xacro:insert_block name="joint_pose" />
      <axis xyz="0 1 0" />
    </joint>

    <!-- In reality, Jackal has only two motors, one per side. However, it's more
         straightforward for Gazebo to simulate as if there's an actuator per wheel. -->
    <transmission name="${prefix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${prefix}_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${prefix}_actuator">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
  </xacro:macro>


  <xacro:wheel prefix="${robot_frame_prefix}front_left">
    <origin xyz="${wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>
  <xacro:wheel prefix="${robot_frame_prefix}front_right">
    <origin xyz="${wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>
  <xacro:wheel prefix="${robot_frame_prefix}rear_left">
    <origin xyz="${-wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>
  <xacro:wheel prefix="${robot_frame_prefix}rear_right">
    <origin xyz="${-wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
  </xacro:wheel>

  <link name="${robot_frame_prefix}base_link"></link>

  <joint name="${robot_frame_prefix}base_link_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="${robot_frame_prefix}base_link"/>
    <child link="${robot_frame_prefix}chassis_link" />
  </joint>

  <link name="${robot_frame_prefix}chassis_link">
    <visual>
      <origin xyz="0 0 ${footprint_vertical_offset}" rpy="${PI/2} 0 ${PI/2}"/>
      <geometry>
        <mesh filename="package://jackal_description/meshes/jackal-base.stl"/>
      </geometry>
      <material name="dark_grey" />
    </visual>
    <collision>
      <origin xyz="0 0 ${chassis_height/2}"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
    <inertial>
      <!-- Center of mass -->
      <origin xyz="0.012  0.002 0.067" rpy="0 0 0"/>
      <mass value="16.523"/>
      <!-- Moments of inertia: ( chassis without wheels ) -->
      <inertia
        ixx="0.3136" ixy="-0.0008" ixz="0.0164"
        iyy="0.3922" iyz="-0.0009"
        izz="0.4485"/>
      </inertial>
  </link>

  <link name="${robot_frame_prefix}fenders_link">
    <visual>
      <origin xyz="0 0 ${footprint_vertical_offset}" rpy="${PI/2} 0 ${PI/2}"/>
      <geometry>
        <mesh filename="package://jackal_description/meshes/jackal-fenders.stl"/>
      </geometry>
      <material name="yellow" />
    </visual>
  </link>
  <joint name="fenders_joint" type="fixed">
    <parent link="${robot_frame_prefix}chassis_link" />
    <child link="${robot_frame_prefix}fenders_link" />
  </joint>

  <!-- TODO: Make this internal_imu_link or something, and use a mixed-in xacro
       to supply the joint between it and imu_link. This is important so that imu_link
       always points to the "active" IMU. When an upgrade IMU is connected, the
       internal_imu_link should remain, but imu_link should point to the upgrade one. -->
  <link name="${robot_frame_prefix}imu_link">
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="${dummy_inertia}" ixy="0.0" ixz="0.0" iyy="${dummy_inertia}" iyz="0.0" izz="${dummy_inertia}"/>
    </inertial>
  </link>
  <joint name="${robot_frame_prefix}imu_joint" type="fixed">
    <parent link="${robot_frame_prefix}chassis_link" />
    <child link="${robot_frame_prefix}imu_link" />
  </joint>

  <!-- TODO: Same note as applies to imu_link -->
  <link name="${robot_frame_prefix}navsat_link">
    <visual>
      <geometry>
        <cylinder radius="0.026" length="0.016" />
      </geometry>
      <origin xyz="0 0 0.008" />
      <material name="black" />
    </visual>
  </link>
  <joint name="${robot_frame_prefix}navsat_joint" type="fixed">
    <parent link="${robot_frame_prefix}chassis_link" />
    <child link="${robot_frame_prefix}navsat_link" />
    <origin xyz="-0.180 0.126 0.1815" />
  </joint>

  <link name="${robot_frame_prefix}mid_mount"></link>
  <joint name="${robot_frame_prefix}mid_mount_joint" type="fixed">
    <parent link="${robot_frame_prefix}chassis_link" />
    <child link="${robot_frame_prefix}mid_mount" />
    <origin xyz="0 0 ${chassis_height}" />
  </joint>

  <link name="${robot_frame_prefix}rear_mount"></link>
  <joint name="${robot_frame_prefix}rear_mount_joint" type="fixed">
    <parent link="${robot_frame_prefix}mid_mount" />
    <child link="${robot_frame_prefix}rear_mount" />
    <origin xyz="${-mount_spacing} 0 0" />
  </joint>

  <link name="${robot_frame_prefix}front_mount"></link>
  <joint name="${robot_frame_prefix}front_mount_joint" type="fixed">
    <parent link="${robot_frame_prefix}mid_mount" />
    <child link="${robot_frame_prefix}front_mount" />
    <origin xyz="${mount_spacing} 0 0" />
  </joint>


  <!-- Camera -->
  <joint name="${robot_frame_prefix}camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0.2 0. 0.15" rpy="0 0 0"/>
    <parent link="${robot_frame_prefix}base_link"/>
    <child link="${robot_frame_prefix}camera_link"/>
  </joint>
  <link name="${robot_frame_prefix}camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_link_size} ${camera_link_size} ${camera_link_size}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${camera_link_size} ${camera_link_size} ${camera_link_size}"/>
      </geometry>
      <material name="black"/>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <!-- Add camera optical frame with standard computer vision orientation -->
  <joint name="${robot_frame_prefix}camera_optical_joint" type="fixed">
    <origin xyz="0.0 0.0 0.0" rpy="-1.5707963 0 -1.5707963"/>
    <parent link="${robot_frame_prefix}camera_link"/>
    <child link="${robot_frame_prefix}camera_optical_link"/>
  </joint>
  <link name="${robot_frame_prefix}camera_optical_link">
  </link>

  <!-- http://wiki.ros.org/urdf/Tutorials/Adding%20Physical%20and%20Collision%20Properties%20to%20a%20URDF%20Model -->
  <joint name="${robot_frame_prefix}laser_mount_cylinder_joint" type="fixed">
    <origin xyz="0 0 0.15" rpy="0 0 0" />
    <parent link="${robot_frame_prefix}base_link"/>
    <child link="${robot_frame_prefix}laser_mount_cylinder" />
  </joint>
  <link name="${robot_frame_prefix}laser_mount_cylinder">
    <visual>
      <geometry>
        <cylinder length="0.3" radius="0.01"/>
      </geometry>
      <material name="laser_mount_cylinder_white">
        <color rgba="1.0 1.0 1.0 1"/>
      </material>
    </visual>
  </link>

  <!-- Bring in simulation data for Gazebo. -->
  <xacro:include filename="$(find jackal_3dmain)/urdf/jackal.gazebo.xacro" />
    <xacro:jackal_gazebo name="${robot_name}" 
     frame_prefix="${robot_frame_prefix}" topic_prefix="${robot_topic_prefix}" imuRate="${imuRate}"/>

  <!-- Optional standard accessories, including their simulation data. The rendering
       of these into the final description is controlled by optenv variables, which
       default each one to off.-->
  <xacro:include filename="$(find jackal_description)/urdf/accessories.urdf.xacro" />

  <!-- Optional custom includes. -->
  <xacro:if value="$(optenv JACKAL_URDF_EXTRAS 0)">
    <xacro:include filename="$(env JACKAL_URDF_EXTRAS)" />
  </xacro:if>


  <!-- Base Footprint -->
  <joint name="${robot_frame_prefix}base_footprint_joint" type="fixed">
    <parent link="${robot_frame_prefix}base_link" />
    <child link="${robot_frame_prefix}base_footprint_link" />
  </joint>
  <link name="${robot_frame_prefix}base_footprint_link" />  


  <xacro:arg name="OS0" default="false" />
  <xacro:arg name="OS1" default="false" />
  <xacro:arg name="VLP16" default="false" />

  <xacro:arg name="gpu" default="true"/>
  <xacro:property name="gpu" value="$(arg gpu)" />
  <xacro:arg name="organize_cloud" default="false"/>
  <xacro:property name="organize_cloud" value="$(arg organize_cloud)" />

  
  <!-- Select a lidar among OS0, OS1, VPL16 (mutually exclusive) -->  
  <xacro:if value="$(arg OS0)">
      <xacro:include filename="$(find ouster_os1_64)/urdf/os0_64.urdf.xacro"/>
      <xacro:os0_64 
        parent="${robot_frame_prefix}base_footprint" 
        name="ouster" 
        topic_prefix="os_cloud_node" frame_prefix="${robot_frame_prefix}" organize_cloud="${organize_cloud}" 
        hz="10" samples="1024" num_rings="64" min_range="0.1" filter_radius="0.4" gpu="${gpu}">
          <origin xyz="0 0 0.3" rpy="0 0 0" />
      </xacro:os0_64>

      <!-- you can also use VLP gazebo driver for generating ouster-like sensor readings -->
      <!--xacro:include filename="$(find velodyne_description)/urdf/ouster.urdf.xacro"/>
      <xacro:ouster 
        parent="${robot_frame_prefix}base_link" 
        name="ouster" 
        topic="os_cloud_node/points" frame_prefix="${robot_frame_prefix}" organize_cloud="${organize_cloud}" 
        hz="10" samples="1024" lasers="64" min_range="0.3" min_angle_v="-45.0" max_angle_v="45.0" gpu="${gpu}">
        <origin xyz="0 0 0.3" rpy="0 0 0" />
      </xacro:ouster--> 

  </xacro:if>
  <xacro:unless value="$(arg OS0)">

    <xacro:if value="$(arg OS1)">
        <xacro:include filename="$(find ouster_os1_64)/urdf/os1_64.urdf.xacro"/>
        <xacro:os1_64 
          parent="${robot_frame_prefix}base_footprint" 
          name="ouster" 
          topic_prefix="os_cloud_node" frame_prefix="${robot_frame_prefix}" organize_cloud="${organize_cloud}"
          hz="10" samples="1024" num_rings="64" min_range="0.1" filter_radius="0.4" gpu="${gpu}">
            <origin xyz="0 0 0.3" rpy="0 0 0" />
        </xacro:os1_64>
    </xacro:if>
    <xacro:unless value="$(arg OS1)">

      <xacro:if value="$(arg VLP16)">
          <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>
          <xacro:VLP-16 
            parent="${robot_frame_prefix}base_link" 
            name="velodyne" 
            topic="velodyne_points" frame_prefix="${robot_frame_prefix}" organize_cloud="${organize_cloud}" 
            hz="10" samples="1800" lasers="16" min_range="0.1" filter_radius="0.4" gpu="${gpu}">
            <origin xyz="0 0 0.3" rpy="0 0 0" />
          </xacro:VLP-16>    
      </xacro:if>

    </xacro:unless>

  </xacro:unless>
  

  
</robot>
